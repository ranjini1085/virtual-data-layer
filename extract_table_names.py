#!/usr/bin/env python

import sqlparse
from sqlparse.sql import IdentifierList, Identifier
from sqlparse.tokens import Keyword
from parse_utilities import is_subselect


def extract_from_part(parsed):
    '''generator function that extracts "from" part of a query,
       including any nested subqueries

        keyword-args:
            parsed - list of output from sqlparse.parse() command

        returns:
            each "from" portion of the query until no more remain
    '''
    from_seen = False
    for item in parsed.tokens:
        if from_seen:
            if is_subselect(item):
                for x in extract_from_part(item):
                    yield x
            elif item.ttype is Keyword:
                raise StopIteration
            else:
                yield item
        elif item.ttype is Keyword and item.value.upper() == 'FROM':
            from_seen = True


def extract_table_identifiers(token_stream):
    '''extracts table aliases from a "from" portion of a query

        keyword-args:
            token_stream - stream of tokens generated by
                           the extract_from_part function

        returns:
            list of tables and their aliases
    '''

    for item in token_stream:

        if isinstance(item, IdentifierList):
            for identifier in item.get_identifiers():
                table_definition = {}
                table_definition['schema'] = identifier.get_parent_name()
                table_definition['name'] = identifier.get_real_name()
                table_definition['alias'] = identifier.get_alias()
                yield table_definition
        elif isinstance(item, Identifier):
            table_definition = {}
            table_definition['schema'] = item.get_parent_name()
            table_definition['name'] = item.get_real_name()
            table_definition['alias'] = item.get_alias()
            yield table_definition
        elif item.ttype is Keyword:
            yield item.value


def extract_table_definitions(sql):
    '''extracts tables and their aliases from a SQL statement.
       does not validate that the SQL is correct

        keyword-args: a string containing a SQL statement

        returns: a list of table identifiers
    '''
    stream = extract_from_part(sqlparse.parse(sql)[0])
    return list(extract_table_identifiers(stream))


if __name__ == '__main__':
    sql = """select c.customer_name, o.order_date
            from tcph.customer c, tcph.order as o, tcph.part
            where c.customer_id = o.customer_id
            and c.customer_id = o.customer_id
            and o.part_number = tcph.part.part_number;"""

    print(extract_table_definitions(sql))

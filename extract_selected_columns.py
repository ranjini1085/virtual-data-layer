#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright (C) 2016 Andi Albrecht, albrecht.andi@gmail.com
#
# This code is based on of python-sqlparse and is released under
# the BSD License: https://opensource.org/licenses/BSD-3-Clause

import sqlparse
from sqlparse.sql import IdentifierList, Identifier, Token
from sqlparse.tokens import Keyword, DML, Whitespace, Newline

import parse_utilities
from parse_utilities import is_subselect


def extract_select_part(parsed):
    '''generator function that extracts "select" part of a query, including any nested subqueries

        keyword-args:
            parsed - list of output from sqlparse.parse() command
            
        returns:
            each "select" portion of the query until no more remain
    '''
    select_seen = False
    keyword_count = 0
    for item in parsed.tokens:
#        print(item)
#        print(item.ttype)
        if select_seen and keyword_count == 0:
            if item.ttype is Keyword:
                keyword_count += 1
            elif item.ttype is Whitespace or item.ttype is Newline:
                yield None
            else:
                yield item
        elif item.ttype is DML and item.value.upper() == 'SELECT':
            select_seen = True
        elif select_seen and keyword_count > 0:
            if is_subselect(item):
                for x in extract_select_part(item):
                    yield x
            elif item.ttype is Keyword:
                raise StopIteration
            else:
                yield None


def extract_selected_fields(token_stream):
    '''extracts column identifiers from a "select" portion of a query

        keyword-args:
        token_stream - stream of tokens generated by the extract_select_part function
            
        returns:
        list of column identifiers
    '''
        
    for item in token_stream:
        if isinstance(item, IdentifierList):
            for identifier in item.get_identifiers():
                yield identifier.value
        elif isinstance(item, Token) and item.value != ' ':
            yield item.value


def extract_select(sql):
    '''extracts selected columns from a SQL statement.  does not validate that the SQL is correct

        keyword-args: a string containing a SQL statement
        
        returns: a list of column identifiers
    '''

    stream = extract_select_part(sqlparse.parse(sql)[0])
    return list(extract_selected_fields(stream))


if __name__ == '__main__':
#    sql = """
#    select K.a,K.b from (select H.b from (select G.c from (select F.d from
#    (select E.e from A, B, C, D, E), F), G), H), I, J, K order by 1,2;
#    """

    sql = """select c.customer_name, o.order_date
            from tcph.customer c, tcph.order o
            where c.customer_id = o.customer_id
            and c.customer_id = o.customer_id;"""

#    sql= """select a, sum(b) from (select c,d from dual) group by a"""

    print(extract_select(sql))
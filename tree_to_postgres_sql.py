#!/usr/bin/python
import re

def syntax_replace_posgres(input_token, sql_type):
    '''Converts oracle-compatible SQL tokens to postgres-compatible SQL tokens. 

    keyword args:
        input_token: SQL token text
        sql_type: type of SQL system that tree was originally intended for.  Currently supports 'Oracle'
    
    
    returns:
        SQL string with non-Postgres syntax replaced by Postgres-compatible syntax
    '''
    
    sql_token = input_token
    
    if sql_type.upper() == 'ORACLE':
        sql_token = sql_token.replace('sysdate',"'now'::timestamp")
        sql_token = sql_token.replace('nvl(','coalesce(')
        sql_token = sql_token.replace('rowid','ctid')
        sql_token = re.sub(r'(\w+)\.nextval',"nextval('\g<1>')",sql_token)
        
    return sql_token

def tree_to_postgres_sql(sql_tree, sql_type):
    '''Converts SQL tree to Postgres-compatible SQL.  Does not validate that input SQL is correct.

    keyword args:
        sql_tree: SQL tree, as generated by sql_to_tree module
        sql_type: type of SQL system that tree was originally intended for.  Currently supports 'Oracle'
    
    
    returns:
        SQL command text string        
    '''
    
    sql_command = ''
    
    #construct select block
    if len(sql_tree['select']) + len(sql_tree['select aggregate']) > 0:
        sql_command += 'select '
    
        select_block = sql_tree['select']
        select_block.extend(sql_tree['select aggregate'])

        for i,select_field in enumerate(select_block):
            
            #replace non-standard SQL parts with Postgres SQL parts
            sql_command += syntax_replace_posgres(select_field, sql_type)
            
            if i < len(select_block) - 1:
                sql_command += ', '
    
    #construct from block
    if len(sql_tree['table_aliases']) > 0:
        sql_command += ' from '
    
        from_block = sql_tree['table_aliases']
        for i, table_alias_pair in enumerate(from_block):
            sql_command += table_alias_pair[0]
            if table_alias_pair[1] != None:
                sql_command += ' as '
                sql_command += table_alias_pair[1]
                
            if i < len(from_block) - 1:
                sql_command += ', '
    
    #construct where block
    if len(sql_tree['joins']) + len(sql_tree['where_subqueries']) + len(sql_tree['filters']) > 0:
        sql_command += ' where '
    
        where_block = sql_tree['joins']
        where_block.extend(sql_tree['where_subqueries'])
        where_block.extend(sql_tree['filters'])
        
        for i, join in enumerate(where_block):
            
            sql_command += syntax_replace_posgres(join, sql_type)
            
            if i < len(where_block) - 1:
                sql_command += ' and '
                
    #construct group by block
    if len(sql_tree['grouping']) > 0:
        sql_command += ' group by '
    
        groupby_block = sql_tree['grouping']
        
        for i, grouping in enumerate(groupby_block):
            
            sql_command += syntax_replace_posgres(grouping, sql_type)
            
            if i < len(groupby_block) - 1:
                sql_command += ', '
            
    #construct order by block
    if len(sql_tree['ordering']) > 0:
        sql_command += ' order by '
        
        orderby_block = sql_tree['ordering']
        
        for i, ordering in enumerate(orderby_block):
            sql_command += syntax_replace_posgres(ordering, sql_type)
            
            if i < len(orderby_block) - 1:
                sql_command += ', '
                
    #construct having block
    if len(sql_tree['having']) > 0:
        sql_command += ' having '
        
        having_block = sql_tree['having']
        
        for i, having in enumerate(having_block):
            sql_command += syntax_replace_posgres(having, sql_type)
            
            if i < len(having_block) - 1:
                sql_command += ', '
    
    return sql_command

if __name__ == '__main__':
    
    import sql_to_tree
    
    input_sql = """select c.customer_name, o.order_date, sum(o.orders)
                from tcph.customer as c, tcph.order o, tcph.part
                where c.customer_id = o.customer_id
                and o.part_number = tcph.part.part_number
                and c.customer_id = 1
                group by c.customer_name, o.order_date
                order by c.customer_name;"""

    print(tree_to_postgres_sql(sql_to_tree.sql_to_tree(input_sql),'Oracle'))